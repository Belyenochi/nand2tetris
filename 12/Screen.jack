// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int color; // 0 represent white 1 represent black
    static Array screen;
    /** Initializes the Screen. */
    function void init() {
        let color = 0;
        let screen = 16384;

        return;
    }

    /** Erases the entire screen. */
   function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192){
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if(b){
            let color = 1;
        } else {
            let color = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address,value;

        let address = (32*y) + (x/16);
        let value = Memory.peek(16384+address);
        let value = value | (x - (Math.divide(x,16) * 16));
        let value = value & color;
        do Memory.poke(address,value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x,y,dx,dy,a,b,diff;

        let x  = x1;
        let y  = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let diff = (a*dy) - (b*dx);
        while((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x+a, y+b);
            if (dx = 0) {
                if (dy > 0) {
                    let b = b + 1;
                }
                let b = b - 1;
            } else {
                if (dy = 0) {
                    if (dx > 0) {
                        let a = a + 1;
                    }
                    let a = a - 1;
                } else {
                    if(diff < 0) {
                        let a = a + 1;
                        let diff = diff + dy;
                    } else {
                        let b = b + 1;
                        let diff = diff + dx;
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {

        while( ~(y1 > y2) ) {
            do Screen.drawLine(x1, y1,x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int height,width;

        let height = -r;
        if(r < 181) {
            return;
        }
        while(~(height > r)) {
            let width = Math.sqrt((r*r)-(height*height));

            do Math.drawLine(x - width,y + height,x + width, y + height);
            let r = r + 1;
        }
        return;
    }
}
