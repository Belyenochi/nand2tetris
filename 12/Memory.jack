// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static int freeList;

    /** Initializes the class. */
    function void init() {
        var Array heap;

        let heap     = 2048;
        let freeList = 2048;
        let heap[0]  = 0;
        let heap[1]  = 14335;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array memory;
        var int x;
        let memory = 0;
        let x = memory[address];
        return x;
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array memory;
        let memory = 0;
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int oldLength;
        var array segment;

        let segment = freeList;

        let oldLength = segment[1];

        while(segment[1] < (size + 2)) {
            if(segment[0] = 0) {
                return 0;
            }
            let segment = segment[0];
        }
        // let blockAddr[1] = oldLength - size - 2;
        let segment[1] = size;
        let segment[size+2] = 0;
        let segment[size+3] = oldLength - size - 2;
        let freeList = freeList + size + 2;

        return segment;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;

        let segment = freeList;

        while (~(segment[0] = 0)) {
            let segment = segment[0];
        }

        let segment[0] = o;
        return;
    }
}
